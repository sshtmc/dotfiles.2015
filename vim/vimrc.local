set guifont=Monospace\ 10

nmap <C-Q> :qall<CR>
imap <C-Q> <Esc>:qall<CR>
nmap <C-S> :wall<CR>
imap <C-S> <Esc>:wall<CR>

set noautochdir

" Running this command populates the argument list with all of the files
" listed in the quickfix list:
" http://stackoverflow.com/questions/5686206/search-replace-using-quickfix-list-in-vim
command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(values(buffer_numbers))
endfunction

function! FindReplaceAll()
  let curline = getline('.')
  call inputsave()
  let s:searchfor = input('Search For Word: ', expand("<cword>"))
  call inputrestore()
  let s:replacewith = input('Replace With: ', expand("<cword>"))
  call inputrestore()
  execute 'silent Ggrep '. s:searchfor
  execute 'args ' . QuickfixFilenames()
  execute 'argdo %s/' . s:searchfor . '/' . s:replacewith . '/gc'
  execute 'argdo update'
endfunction

nnoremap ; :%s/\<<C-r><C-w>\>/<C-r><C-w>/gc
" nnoremap ; :Ag <C-R><C-W><CR>:Qargs<CR>:argdo %s/<C-R><C-W>/<C-R><C-W>/gc<CR>:argdo update<CR>
nmap <C-F> :Ack <C-R><C-W>
" nmap <C-R> :call FindReplaceAll()<CR>

" copy&paste from system clipboard
set clipboard=unnamed

" 
" " Autocompletion "
" Bundle 'Valloric/YouCompleteMe'
" nnoremap <silent> <F5> :YcmForceCompileAndDiagnostics<CR>
" " nnoremap g] :YcmCompleter GoToDefinitionElseDeclaration *<CR>
" let g:ycm_confirm_extra_conf = 0 " don't ask if it should load the .ycm_extra_conf.py file
" let g:ycm_complete_in_comments = 1
" let g:ycm_collect_identifiers_from_comments_and_strings = 1
" let g:ycm_key_invoke_completion = '<C-p>'
" let g:ycm_allow_changing_updatetime = 1
" 

" Visual preferences
" color peaksea
" colorscheme guepardo
" set t_Co=256
colorscheme solarized
set background=light

" TAB preference
set softtabstop=8               " Let backspace delete indent
set tabstop=8
set shiftwidth=8
set noexpandtab

" Source code navigation "
nnoremap <F2> :TagbarOpenAutoClose<CR>
" let g:tagbar_left = 1 " show on the left side

" Auto-load CScope database, recursively going up

function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
" au BufEnter /* call LoadCscope()  " Every time a new buffer is opened
call LoadCscope() " Do it only once, when VIM starts

autocmd! BufRead,BufNewFile *.ics setfiletype icalendar

nnoremap <silent> g] :cscope find g <cword><CR>
nnoremap <silent> <F3> :cscope find s <cword><CR>
" Bundle 'rking/ag.vim'
nmap <silent> <C-S-G> :cprev<CR>
nmap <silent> <C-G> :cnext<CR>

" Linux Kernel coding style
Bundle 'vivien/vim-addon-linux-coding-style'

" Nerd Commenter
map <silent> <C-D> <plug>NERDCommenterToggle

" Show Undo Tree
" let g:undotree_SetFocusWhenToggle=0
" let g:undotree_HighlightChangedText=0
" let g:undotree_SplitLocation = "botright"
" map <silent> <C-Z> :undo<CR>:UndotreeShow<CR>
" map <silent> <C-Y> :redo<CR>:UndotreeShow<CR>
" map <silent> u :undo<CR>:UndotreeShow<CR>
" map <silent> <C-R> :redo<CR>:UndotreeShow<CR>

" Bundle 'Valloric/ListToggle'
" Bundle 'vim-scripts/listmaps.vim'

" Bubble-move text around
Bundle 'tpope/vim-unimpaired'
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

nmap <silent> <esc> :UndotreeHide<CR>:cclose<CR>:NERDTreeClose<CR>

nmap <leader>date "=strftime("%Y-%m-%d")<CR>p
nmap <leader>time "=strftime("%H:%M:%S")<CR>p
nmap <leader>datetime "=strftime("%Y-%m-%d %H:%M:%S")<CR>p

" Wrap lines only visually
:set wrap      " word wrap visually (as opposed to changing the text in the buffer)
:set linebreak " only wrap at a character in the breakat option (by default, this includes ' ^I!@*-+;:,./?' (note the inclusion of ' ' and that ^I is the control character for Tab))
:set nolist    " list disables linebreak
:set textwidth=0       " prevent Vim from automatically inserting line breaks in newly entered text.
:set wrapmargin=0      " in pair with the above
:set formatoptions+=l  " keep your existing 'textwidth' settings for most lines in your file, but not have Vim automatically reformat when typing on existing lines

